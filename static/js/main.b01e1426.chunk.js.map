{"version":3,"sources":["Components/Navigation.js","Components/Instructions.js","Components/Footer.js","Components/RandomQuote.js","Components/BookFinder.js","Components/BookList.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","className","Container","Row","Col","xs","sm","md","to","Instructions","Footer","RandomQuote","useState","randomQuote","setRandomQuote","makeAPICall","fetch","then","res","json","data","Math","floor","random","length","useEffect","Card","Body","text","author","Button","variant","onClick","BookFinder","props","book","setBook","result","setResult","searchResultsHTML","map","volumeInfo","imageLinks","Img","src","thumbnail","alt","title","authors","addBookToList","id","Form","onSubmit","event","preventDefault","items","Control","onChange","target","value","type","placeholder","BookList","myListHTML","readingList","index","console","log","href","infoLink","rel","removeBook","lg","App","setReadingList","indexToRemove","newList","filter","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b01e1426.chunk.js","sourcesContent":["import {  Container, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nfunction Navigation() {\n  \n  return (\n    <div className=\"nav\">\n      <Container>\n        <Row>\n          <Col xs sm md={8}>\n            <Link className='logo-link' to='/'><h1>BookListBuilder</h1></Link>\n          </Col>\n          <Col xs sm md={4}>\n            <ul>\n              <Link className='navbar-link' to='/'><li>Home</li></Link>\n              <Link className='navbar-link' to='/mylist'><li>My List</li></Link>\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n\n  // return (\n  //   <div className=\"nav\">\n  //     <h1>BookListBuilder</h1>\n  //     <ul>\n  //       <Link to='/'><li>Home</li></Link>\n  //       <Link to='/mylist'><li>My Lists</li></Link>\n  //     </ul>\n  //   </div>\n  // );\n}\n  \n  export default Navigation;","import { Container, Row, Col } from 'react-bootstrap'\n\nfunction Instructions() {\n    return (\n      <Container className=\"instructions\">\n        <Row>\n          <Col>\n            <div>\n              <h2>Welcome</h2>\n              <p>Use BookListBuilder to find books and create a reading list. Not sure what you're looking for? Generate a random quote above and see if anyone's famous words leave you curious for more.</p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n  \n  export default Instructions;\n\n  // git remote add origin https://github.com/damonpickett/react-booklistbuilder.git\n  // git branch -M main\n  // git push -u origin main","import { Link } from 'react-router-dom'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nfunction Footer() {\n    return (\n      <Container className=\"footer\">\n        <Row>\n          <Col >\n            <div>\n              <ul>\n                <Link className='footer-link' to='/'><li>Home</li></Link>\n                <Link className='footer-link' to='/mylist'><li>My List</li></Link>\n              </ul>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n  \n  export default Footer;","import { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap'\n\nfunction RandomQuote() {\n\n  // create a useState\n  const [randomQuote, setRandomQuote] = useState('');\n\n\n  // Call the api - makeAPICall - fetch within this function\n  const makeAPICall = () => {\n    fetch(\"https://type.fit/api/quotes\")\n      .then((res) => res.json())\n      .then((data) => {\n        setRandomQuote(data[Math.floor(Math.random()*data.length)])\n      })\n  }\n\n  // console.log(randomQuote)\n\n  // create a useEffect\n  useEffect(() => {\n    makeAPICall();\n  }, [])\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Card.Body className='random-quote'>\n              <p>{randomQuote.text}</p>\n              <p><span className='author-bold'>{randomQuote.author}</span></p>\n              <Button variant='warning' onClick={makeAPICall}>New Quote</Button>\n          </Card.Body>\n        </Col>\n      </Row>\n    </Container>\n  );\n  }\n  \n  export default RandomQuote;\n\n  // put api calls in makeAPICall and then fetch within that function. \n  // Set the state after the fetch. \n  // Call the makeAPIFunction within useEffect to stop the page from rerendering\n\n  // <button onClick={makeAPICall}>New Quote</button>","import { useState } from \"react\";\nimport { Container, Form, Button, Card, Row, Col } from 'react-bootstrap'\n\nfunction BookFinder(props) {\n\n  const [book, setBook] = useState('');\n  const [result, setResult] = useState([])\n  const apiKey = 'AIzaSyCUAkQ_kTnVDaR6bOZL_1efEXJbVWwwx6c'\n\n  function handleChange(event) {\n    const book = event.target.value;\n    setBook(book)\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${book}&key=${apiKey}&maxResults=20`)\n      .then(res => res.json())\n      .then(data => {\n        // console.log(data.items)\n        setResult(data.items)\n      })\n  }\n\n  const searchResultsHTML = result.map(book => {\n    return(\n      <Card className='search-results-cards' key={book.id}>\n        {book.volumeInfo.imageLinks ? <Card.Img className='search-results-img' src={book.volumeInfo.imageLinks.thumbnail} alt={book.volumeInfo.title}/> : <p>No image available<br />{book.volumeInfo.title} by {book.volumeInfo.authors}</p>}\n        <Button variant='dark' className='search-results-button' onClick={() => props.addBookToList(book)}>Add to Reading List</Button>\n        {/* <p key={book.id}>{book.volumeInfo.description}</p> */}\n      </Card>\n    )\n  })\n\n  \n\n  return (\n    <Container className='book-finder'>\n      <Row>\n        <Col>\n          <div className=\"book-finder\">\n            {/* create a form with input and button */}\n            <Form className='book-search-form' onSubmit={handleSubmit}>\n              <Form.Control className='book-search-input' onChange={handleChange} type=\"text\" placeholder=\"Search for books\" />\n              <Button variant='success' className='book-search-button'type=\"submit\">Search</Button>\n            </Form>\n            {searchResultsHTML}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n  \n  export default BookFinder;\n\n  // used https://www.youtube.com/watch?v=LGcgChoD_qY&t=740s as a guide for this component\n\n  // <input onChange={handleChange} type=\"text\" placeholder=\"Search for books\" />","import { Container, Card, Row, Col, Button } from \"react-bootstrap\";\n\nfunction BookList(props) {\n\n  let myListHTML = props.readingList.map((book, index) => {\n    console.log(index)\n    return (\n      <Card.Body className=\"book-list-card\">\n        <h3>{book.volumeInfo.title}</h3>\n        <p>By {book.volumeInfo.authors}</p>\n        <p><a href={book.volumeInfo.infoLink} rel='noreferrer' target='_blank'>Buy</a></p>\n        <Button variant='secondary' className='book-list-button' onClick={() => props.removeBook(index)}>Remove from list</Button>\n      </Card.Body>\n    )\n  })\n\n  console.log(myListHTML)\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col lg='auto'>\n            <h2>My Reading List</h2>\n            {myListHTML}\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default BookList;","import './App.css';\nimport Navigation from './Components/Navigation';\nimport Instructions from './Components/Instructions';\nimport Footer from './Components/Footer';\nimport RandomQuote from './Components/RandomQuote';\nimport BookFinder from './Components/BookFinder';\nimport BookList from './Components/BookList';\nimport { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nfunction App() {\n\n  const [readingList, setReadingList] = useState([]);\n\n  const addBookToList = (book) => {\n    console.log(book);\n    setReadingList([...readingList, book])\n  }\n\n  const removeBook = (indexToRemove) => {\n    let newList = readingList.filter((book, index) => {\n      // console.log(index)\n      return index !== indexToRemove\n    })\n    // console.log(newList)\n    setReadingList(newList)\n  }\n\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <RandomQuote />\n      <Route exact path='/' render={() => <Instructions />}/>\n      <Route exact path='/' render={() => <BookFinder addBookToList={addBookToList} />}/>\n      <Route exact path='/mylist' render={() => <BookList removeBook={removeBook} readingList={readingList} />}/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter as Router} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}