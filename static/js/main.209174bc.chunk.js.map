{"version":3,"sources":["Components/Navigation.js","Components/Instructions.js","Components/Footer.js","Components/RandomQuote.js","Components/BookFinder.js","Components/BookList.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","className","to","Instructions","Container","Row","Col","Footer","RandomQuote","useState","randomQuote","setRandomQuote","makeAPICall","fetch","then","res","json","data","Math","floor","random","length","useEffect","text","author","Button","variant","onClick","BookFinder","props","book","setBook","result","setResult","searchResultsHTML","map","Card","style","width","volumeInfo","imageLinks","src","thumbnail","alt","title","authors","addBookToList","id","Form","onSubmit","event","preventDefault","items","Control","onChange","target","value","type","placeholder","CardGroup","BookList","myListHTML","readingList","index","console","log","removeBook","App","setReadingList","indexToRemove","newList","filter","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.209174bc.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\n\nfunction Navigation() {\n  \n  return (\n    <div className=\"nav\">\n      <Link className='logo-link' to='/'><h1>BookListBuilder</h1></Link>\n      <Link className='navbar-link' to='/mylist'><li>My List</li></Link>  \n    </div>\n  )\n}\n  \n  export default Navigation;","import { Container, Row, Col } from 'react-bootstrap'\n\nfunction Instructions() {\n    return (\n      <Container className=\"instructions\">\n        <Row>\n          <Col>\n            <div>\n              <h2>Welcome</h2>\n              <p>Use BookListBuilder to find books and create a reading list. Not sure what you're looking for? Generate a random quote above and see if anyone's famous words leave you curious for more.</p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n  \n  export default Instructions;\n\n  // git remote add origin https://github.com/damonpickett/react-booklistbuilder.git\n  // git branch -M main\n  // git push -u origin main","import { Link } from 'react-router-dom'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nfunction Footer() {\n    return (\n      <div className=\"footer\">\n        <div>\n          <ul>\n            <Link className='footer-link' to='/'><li>Home</li></Link>\n            <Link className='footer-link' to='/mylist'><li>My List</li></Link>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n  \n  export default Footer;","import { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap'\n\nfunction RandomQuote() {\n\n  // create a useState\n  const [randomQuote, setRandomQuote] = useState('');\n\n\n  // Call the api - makeAPICall - fetch within this function\n  const makeAPICall = () => {\n    fetch(\"https://type.fit/api/quotes\")\n      .then((res) => res.json())\n      .then((data) => {\n        setRandomQuote(data[Math.floor(Math.random()*data.length)])\n      })\n  }\n\n  // create a useEffect\n  useEffect(() => {\n    makeAPICall();\n  }, [])\n\n  return (\n        <div className='random-quote'>\n            <p>{randomQuote.text}</p>\n            <p><span className='author-bold'>{randomQuote.author}</span></p>\n            <Button variant='warning' onClick={makeAPICall}>New Quote</Button>\n        </div>\n  );\n  }\n  \n  export default RandomQuote;\n\n  // put api calls in makeAPICall and then fetch within that function. \n  // Set the state after the fetch. \n  // Call the makeAPIFunction within useEffect to stop the page from rerendering\n\n  // <button onClick={makeAPICall}>New Quote</button>","import { useState } from \"react\";\nimport { Container, Form, Button, Card, Row, Col, CardGroup } from 'react-bootstrap'\n\nfunction BookFinder(props) {\n\n  const [book, setBook] = useState('');\n  const [result, setResult] = useState([])\n  const apiKey = 'AIzaSyCUAkQ_kTnVDaR6bOZL_1efEXJbVWwwx6c'\n\n  function handleChange(event) {\n    const book = event.target.value;\n    setBook(book)\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${book}&key=${apiKey}&maxResults=20`)\n      .then(res => res.json())\n      .then(data => {\n        setResult(data.items)\n      })\n  }\n\n  const searchResultsHTML = result.map(book => {\n    return(\n        <div className='search-results-cards' key={book.id}>\n          <Card style={{ width: '12rem'}}>\n            {book.volumeInfo.imageLinks ? <img className='search-results-img' src={book.volumeInfo.imageLinks.thumbnail} alt={book.volumeInfo.title}/> : <p>No image available<br />{book.volumeInfo.title} by {book.volumeInfo.authors}</p>}\n            <button className='search-results-button' onClick={() => props.addBookToList(book)}>Add to Reading List</button>\n            {/* <p key={book.id}>{book.volumeInfo.description}</p> */}\n          </Card>\n        </div>\n    )\n  })\n\n  \n\n  return (\n    \n      <Container>\n          <div className=\"book-finder\">\n            {/* create a form with input and button */}\n            <Form className='book-search-form' onSubmit={handleSubmit}>\n              <Form.Control className='book-search-input' onChange={handleChange} type=\"text\" placeholder=\"Search for books\" />\n              <Button variant='success' className='book-search-button'type=\"submit\">Search</Button>\n            </Form>\n            <div className='card-container'>\n              <CardGroup>\n                {searchResultsHTML}\n              </CardGroup>\n            </div>\n          </div>\n        </Container>\n    \n  );\n}\n  \n  export default BookFinder;","import { Container, Card, Row, Col, Button, CardGroup } from \"react-bootstrap\";\n\nfunction BookList(props) {\n\n  let myListHTML = props.readingList.map((book, index) => {\n    console.log(index)\n    return (\n      <div className='search-results-cards' key={book.id}>\n          <Card style={{ width: '12rem'}}>\n            {book.volumeInfo.imageLinks ? <img className='search-results-img' src={book.volumeInfo.imageLinks.thumbnail} alt={book.volumeInfo.title}/> : <p>No image available<br />{book.volumeInfo.title} by {book.volumeInfo.authors}</p>}\n            {/* <p><a href={book.volumeInfo.infoLink} rel='noreferrer' target='_blank'>Buy</a></p> */}\n            <button className='book-list-button' onClick={() => props.removeBook(index)}>Remove from list</button>\n            {/* <p key={book.id}>{book.volumeInfo.description}</p> */}\n          </Card>\n        </div>\n    )\n  })\n\n  return (\n    <>\n      <div className='book-list-container'>\n        \n            <h2>My Reading List</h2>\n            <CardGroup>\n              {myListHTML}\n            </CardGroup>\n          \n      </div>\n    </>\n  );\n}\n\nexport default BookList;","import './App.css'; \nimport Navigation from './Components/Navigation';\nimport Instructions from './Components/Instructions';\nimport Footer from './Components/Footer';\nimport RandomQuote from './Components/RandomQuote';\nimport BookFinder from './Components/BookFinder';\nimport BookList from './Components/BookList';\nimport { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nfunction App() {\n\n  const [readingList, setReadingList] = useState([]);\n\n  const addBookToList = (book) => {\n    setReadingList([...readingList, book])\n  }\n\n  const removeBook = (indexToRemove) => {\n    let newList = readingList.filter((book, index) => {\n      return index !== indexToRemove\n    })\n    setReadingList(newList)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='app-container'>\n        <Navigation />\n        <RandomQuote />\n        <Route exact path='/' render={() => <Instructions />}/>\n        <Route exact path='/' render={() => <BookFinder addBookToList={addBookToList} />}/>\n        <Route exact path='/mylist' render={() => <BookList removeBook={removeBook} readingList={readingList} />}/>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter as Router} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}